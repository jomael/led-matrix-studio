/*************************************************** 
  This is a library for our I2C LED Backpacks

  Designed specifically to work with the Adafruit LED Matrix backpacks 
  ----> http://www.adafruit.com/products/872
  ----> http://www.adafruit.com/products/871
  ----> http://www.adafruit.com/products/870

  These displays use I2C to communicate, 2 pins are required to 
  interface. There are multiple selectable I2C addresses. For backpacks
  with 2 Address Select pins: 0x70, 0x71, 0x72 or 0x73. For backpacks
  with 3 Address Select pins: 0x70 thru 0x77

  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/
 
// this example by Paul A Freshney, for the Adafruit 8x8 bicolour matrix
// data created using the LED Matrix Studio
// http://www.maximumoctopus.com/electronics/builder.htm
//
// paul@freshney.org 

// you will need to install the Adafruit LEDBackpack and GFX libraries
// see here on how to install these

// http://learn.adafruit.com/adafruit-led-backpack/bi-color-8x8-matrix

  #include <Wire.h>
  #include "Adafruit_LEDBackpack.h"
  #include "Adafruit_GFX.h"

  Adafruit_BicolorMatrix matrix = Adafruit_BicolorMatrix();

  void setup()
  {
    matrix.begin(0x70);  // pass in the address
  }

  // this data generated by the LED Matrix Studio
  // set to BiColour (bitplanes), 8x8 matrix
  // use the Columns data, LSB at Top, Right to Left
  // the right side column of the matrix corresponds to the 0th buffer location, left side is 7th.
  uint16_t shape[] = {0xFF00, 0x8100, 0x9918, 0xA53C, 0xA53C, 0x9918, 0x8100, 0xFF00};

  uint16_t paf[]   = {0x0081, 0x0481, 0x1481, 0x3C81, 0x0081, 0x3CBD, 0x1495, 0x3CBD, 0x0081, 0x1C81, 0x1481, 0x3C81, 0x0081};
  
  void loop()
  {
    matrix.clear();
    matrix.writeDisplay();
    delay(500);
  
    for (int t = 0; t<8; t++)
    {
      matrix.displaybuffer[t] = shape[t]; // manipulate the display buffer directly with our own data
    }
  
    matrix.writeDisplay();
  
    delay(2000);
  
    // move through the data gives an animation effect
    for (int i = 0; i<6; i++)
    {
      for (int t = 0; t<8; t++)
      {
        matrix.displaybuffer[t] = paf[i + t]; // manipulate the display buffer directly with our own data
      }
      matrix.writeDisplay();
    
      delay(300);
    }  
  
    // move through the data gives an animation effect (opposite way this time)
    for (int i = 0; i<6; i++)
    {
      for (int t = 0; t<8; t++)
      {
        matrix.displaybuffer[t] = paf[(5-i) + t]; // manipulate the display buffer directly with our own data
      }
      matrix.writeDisplay();
    
      delay(300);
    }    
  }
  
