 ===============================================================================
 =                                                                             =
 =  LED Matrix Studio v0.8                                                     =
 =                                                                             =
 =  July 3rd 2015                                                              =
 =                                                                             =
 =  www.freshney.org // paul@freshney.org                                      =
 =                                                                             =
 =  www.maximumoctopus.com/electronics/builder.htm                             =
 =                                                                             =
 =  Application:                                                               =
 =  www.maximumoctopus.com/electronics/downloads/LEDMatrixStudio.zip           =
 =                                                                             =
 =  Source code:                                                               =
 =  www.maximumoctopus.com/electronics/downloads/LEDMatrixStudioSource.zip     =
 =                                                                             =
 =                                                                             = 
 ===============================================================================

  What is it?

The optimise feature of the LED Matrix Studio aims to cut down the amount of space
required by an animation or single frame.

With modern microcontrollers having only limtied ROM space, it's imperative that
the space is not wasted.


  How do I turn it on?

Click the "Optimise output" checkbox on the Export screen. Access Export from the
bottom of the Project menu. If the software is unable to optimise, the optimised
version is larger than the original, then it will show the unoptimised output
in the preview pane.

  
  So it's compression?

A very basic form, yes. Though it requires very little extra work by the microcontroller.
But this also limits the compression factor. We're not really compressing the data,
just laying it out differently!


  Does it work on any size matrix?

It will do its best. It works best when the output is either 16 or 32 bit, or RGB
(which is, of course also 32 bit wide). Using optimise with 8 bit output will only
increase the amount of space required for the data!

If you're using optimise with RGB output then limiting the number of colours in
your animation will make a big difference to the optimisation.

  So, how does it work?

The optimise feature looks at the data, and splits the output in to two sections.

1) An array of data values. (a look-up table)
2) The matrix data, referencing an element in the look-up table.

    Example:

    data[$00ffffff, $00ff00ff, $00ffffff, $00ff00ff, $00ffffff, $00ff00ff, $0ffffff];

The data[] array is 7 x 4 bytes = 28 bytes. But only two values are used, so we split it thus:

lookuptable[$00ffffff, $00ff00ff];

matrixdata[0, 1, 0, 1, 0, 1, 0];

The lookuptable[] array is 8 bytes (2 * 4), the matrixdata[] array is 7, total = 15 bytes. A
saving of 13 bytes (46%).

That's a simple example, but shows what can be achieved.
  

  How do I use it within my code?

For the example above, one can access the data using:

  lookuptable[matrixdata[x]]


Where x is in the range 0 to 6 (the size of the matrixdata array.

That's about it. It's not complicated, and won't add any significant amount of overhead
to your code. It's not free, computationally speaking, but the trade-off is more than
worth it - especially if you're running low on ROM space!

===============================================================================