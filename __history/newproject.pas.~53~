// ===================================================================
//
// (c) Paul Alan Freshney 2015
// www.freshney.org :: paul@freshney.org :: maximumoctopus.com
//
// www.MaximumOctopus.com/electronics/builder.htm
//
// Please do not redistribute the source code!
//
//   Started: November 1st 2014
//  Modified: June 3rd 2015
//
// ===================================================================

unit newproject;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, utility, ExtCtrls, ComCtrls;

type
  TfrmNewProject = class(TForm)
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    GroupBox3: TGroupBox;
    GroupBox4: TGroupBox;
    Label4: TLabel;
    ComboBox7: TComboBox;
    ComboBox8: TComboBox;
    ComboBox9: TComboBox;
    Label3: TLabel;
    Label5: TLabel;
    eFrames: TEdit;
    Bevel19: TBevel;
    pcNew: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    cbHeight: TComboBox;
    cbWidth: TComboBox;
    cbMatrixType: TComboBox;
    GroupBox2: TGroupBox;
    Label2: TLabel;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    cbPresets: TComboBox;
    GroupBox5: TGroupBox;
    GroupBox6: TGroupBox;
    Label8: TLabel;
    ComboBox5: TComboBox;
    ComboBox6: TComboBox;
    ComboBox10: TComboBox;
    cbClearAll: TCheckBox;
    Label6: TLabel;
    Label7: TLabel;
    Label9: TLabel;
    lPresetType: TLabel;
    lPresetWidth: TLabel;
    lPresetHeight: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure cbPresetsChange(Sender: TObject);
  private
    procedure BuildPresetList;
    procedure LoadPreset(filename : string);
  public
    { Public declarations }
  end;

var
  frmNewProject: TfrmNewProject;

function DoNewProject(oldsettings : TProjectSettings; appstatus : boolean): TProjectSettings;

implementation

{$R *.dfm}

uses xglobal;

var
 clearstatus : boolean;

function DoNewProject(oldsettings : TProjectSettings; appstatus : boolean): TProjectSettings;
 begin
  with TfrmNewProject.Create(Application) do begin
    try
      Result.mtype  := -1;
      Result.width  := -1;
      Result.height := -1;
      Result.clear  := False;

      clearstatus   := appstatus;

      cbMatrixType.ItemIndex := oldsettings.mtype;
      cbWidth.ItemIndex      := cbWidth.Items.IndexOf(IntToStr(oldsettings.width));
      cbHeight.ItemIndex     := cbHeight.Items.IndexOf(IntToStr(oldsettings.height));

      BuildPresetList;

      ShowModal;

      if ModalResult = mrOK then begin
        if pcNew.ActivePageIndex = 0 then begin
          Result.mtype   := cbMatrixType.ItemIndex;
          Result.width   := StrToInt(cbWidth.Text);
          Result.height  := StrToInt(cbHeight.Text);
        end
        else begin
          Result.mtype   := lPresetType.Tag;
          Result.width   := StrToInt(lPresetWidth.Text);
          Result.height  := StrToInt(lPresetHeight.Text);
        end;

        Result.clear   := cbClearAll.Checked;
        Result.special := StrToInt(eFrames.Text);
      end;
    finally
      Free;
    end;
  end;
end;

procedure TfrmNewProject.BitBtn1Click(Sender: TObject);
 begin
  if ValidateNumber(eFrames.Text, 500) then begin
    if clearstatus then begin   
      if cbClearAll.Checked then begin
        if MessageDlg('Are you sure you want to delete the current matrix?', mtWarning, [mbYes, mbNo], 0) = mrYes then
          ModalResult := mrOK;
      end;
    end
    else
      ModalResult := mrOK;
  end
  else begin
    eFrames.SelectAll;
    eFrames.SetFocus;
  end;
end;

procedure TfrmNewProject.FormCreate(Sender: TObject);
 var
  x : integer;

 begin
  cbMatrixType.Items.Add('Single colour');
  cbMatrixType.Items.Add('Bi-colour (sequential)');
  cbMatrixType.Items.Add('Bi-colour (bitplanes)');
  cbMatrixType.Items.Add('RGB :)');
  cbMatrixType.ItemIndex := 0;

  // ===========================================================================

  for x:=1 to 64 do begin
    cbWidth.Items.Add(IntToStr(x));
    cbHeight.Items.Add(IntToStr(x));
  end;
end;

procedure TfrmNewProject.BuildPresetList;
 var
  searchResult : TSearchRec;
  i : integer;

  function RemoveExtension(s : string): string;
   var
    idx,t : integer;

   begin
     idx    := -1;
     Result := s;

     for t:=1 to length(s) do
       if s[t] = '.' then idx := t;

     if idx <> -1 then
       Result := Copy(s, 1, idx - 1);
   end;

begin
  // Try to find regular files matching Unit1.d* in the current dir
  if FindFirst(ExtractFilePath(Application.ExeName) + 'presets\*.ledspreset', faAnyFile, searchResult) = 0 then begin
    i := 0;

    repeat
      cbPresets.Items.Add(RemoveExtension(searchResult.Name));
    until FindNext(searchResult) <> 0;

    // Must free up resources used by these successful finds
    FindClose(searchResult);

    cbPresets.ItemIndex := 0;
  end
  else begin
  end;
end;

procedure TfrmNewProject.cbPresetsChange(Sender: TObject);
 begin
  LoadPreset(ExtractFilePath(Application.ExeName)+'presets\' + cbPresets.Text + '.ledspreset');
end;

procedure TfrmNewProject.LoadPreset(filename : string);
 var
  tf   : TextFile;
  s, v : string;

 begin
  AssignFile(tf, filename);
  Reset(tf);

  while not(eof(tf)) do begin
    readln(tf, s);

    if s <> '' then begin
      v := Copy(s, 3, length(s) - 2);

      case GetPresetParameterType(s) of
        2 : lPresetWidth.Caption  := IntToStr(StrToInt(v) + 1);
        3 : lPresetHeight.Caption := IntToStr(StrToInt(v) + 1);
        9 : begin
              case StrToInt(v) of
                psTypeMono          : lPresetType.Caption := 'Single colour';
                psTypeBiSequential  : lPresetType.Caption := 'Bi-colour (sequential)';
                psTypeBiBitPlanes   : lPresetType.Caption := 'Bi-colour (bitplanes)';
                psTypeRGB           : lPresetType.Caption := 'RGB';
              end;

              lPresetType.Tag := StrToInt(v);
            end;
      end;
    end;
  end;

  CloseFile(tf);
end;

end.
