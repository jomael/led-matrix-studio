// ===================================================================
//
// (c) Paul Alan Freshney 2012-2016
// www.freshney.org :: paul@freshney.org :: maximumoctopus.com
//
// www.MaximumOctopus.com/electronics/builder.htm
//
// Please do not redistribute the source code!
//
//   Started: May 21st 2015
//  Modified: January 1st 2016
//
// ===================================================================

unit exportcode;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Buttons;

type
  TfrmExportCode = class(TForm)
    Panel2: TPanel;
    GroupBox1: TGroupBox;
    Memo1: TMemo;
    cbPlatforms: TComboBox;
    GroupBox2: TGroupBox;
    cbCode: TComboBox;
    GroupBox3: TGroupBox;
    Label1: TLabel;
    lSource: TLabel;
    Label3: TLabel;
    lLSB: TLabel;
    Label5: TLabel;
    lFormat: TLabel;
    lNumbers: TLabel;
    Label8: TLabel;
    lGrouping: TLabel;
    Label10: TLabel;
    lOutput: TLabel;
    Label12: TLabel;
    lRGB: TLabel;
    Label14: TLabel;
    Label2: TLabel;
    Label4: TLabel;
    lDirection: TLabel;
    lScan: TLabel;
    sbSave: TBitBtn;
    sdExportCode: TSaveDialog;
    sbCopyToClipboard: TBitBtn;
    Label6: TLabel;
    Label7: TLabel;
    Label9: TLabel;
    Label11: TLabel;
    lMinWidth: TLabel;
    lMaxWidth: TLabel;
    lMinHeight: TLabel;
    lMaxHeight: TLabel;
    BitBtn1: TBitBtn;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure cbPlatformsChange(Sender: TObject);
    procedure cbCodeChange(Sender: TObject);
    procedure sbSaveClick(Sender: TObject);
    procedure sbCopyToClipboardClick(Sender: TObject);
    procedure FormConstrainedResize(Sender: TObject; var MinWidth, MinHeight,
      MaxWidth, MaxHeight: Integer);
  private
    { Private declarations }
    procedure UpdatePlatformList;
    procedure UpdateCodeList;
    procedure UpdateSettingsDisplay;

    procedure LoadCode;
  public
    { Public declarations }
  end;

var
  frmExportCode: TfrmExportCode;

function DoExportCode(mtype : integer): word; // mode = 0 (animation), 1 = (user memories)

implementation

{$R *.dfm}

uses utility, xglobal, exportoutputcode;

var
 eeo : TExportOptions;

function DoExportCode(mtype : integer): word; // mode = 0 (animation), 1 = (user memories)
 begin
  with TfrmExportCode.Create(Application) do
    try
      ShowModal;

      Result := ModalResult;
    finally
      Free;
    end;
end;

procedure TfrmExportCode.sbCopyToClipboardClick(Sender: TObject);
 begin
  Memo1.SelectAll; 
  Memo1.CopyToClipboard;
end;

procedure TfrmExportCode.sbSaveClick(Sender: TObject);
 begin
  if sdExportCode.Execute then
    Memo1.Lines.SaveToFile(sdExportCode.FileName);
end;

procedure TfrmExportCode.cbCodeChange(Sender: TObject);
 begin
  LoadCode;
end;

procedure TfrmExportCode.cbPlatformsChange(Sender: TObject);
 begin
  UpdateCodeList;
end;

procedure TfrmExportCode.FormClose(Sender: TObject; var Action: TCloseAction);
 begin
  Action := caFree;
end;

procedure TfrmExportCode.FormConstrainedResize(Sender: TObject; var MinWidth,
  MinHeight, MaxWidth, MaxHeight: Integer);
 begin
  MinHeight := 490;
  MinWidth  := 490;
end;

procedure TfrmExportCode.FormCreate(Sender: TObject);
 begin
  UpdatePlatformList;
end;

procedure TfrmExportCode.UpdatePlatformList;
 var
  searchResult : TSearchRec;
 begin
  cbPlatforms.Clear;

  if FindFirst(ExtractFilePath(Application.ExeName) + 'codetemplates\*.*', faDirectory, searchResult) = 0 then begin
    repeat
      if (searchResult.Name <> '.') and (searchResult.Name <> '..') and 
         ((searchResult.Attr and faDirectory) = faDirectory) then
        cbPlatforms.Items.Add(searchResult.Name);
    until FindNext(searchResult) <> 0;

    // Must free up resources used by these successful finds
    FindClose(searchResult);
  end;

  if cbPlatforms.Items.Count <> 0 then begin
    cbPlatforms.ItemIndex := 0;
    cbPlatforms.Enabled   := True;

    UpdateCodeList;
  end
  else
    cbPlatforms.Enabled := False;
end;

procedure TfrmExportCode.UpdateCodeList;
 var
  searchResult : TSearchRec;
 begin
  cbCode.Clear;

  if FindFirst(ExtractFilePath(Application.ExeName) + 'codetemplates\' + cbPlatforms.Text + '\*.*', faAnyFile, searchResult) = 0 then begin
    repeat
      if (searchResult.Name <> '.') and (searchResult.Name <> '..') and
         (Pos('.template', searchResult.Name)=0) then
        cbCode.Items.Add(searchResult.Name);
    until FindNext(searchResult) <> 0;

    // Must free up resources used by these successful finds
    FindClose(searchResult);
  end;

  if cbCode.Items.Count <> 0 then begin
    cbCode.ItemIndex := 0;

    cbCode.Enabled := True;

    LoadCode;
  end
  else begin
    cbCode.Items.Add('No code templates found.');

    cbCode.ItemIndex := 0;

    cbCode.Enabled := False;
  end;
end;

procedure TfrmExportCode.LoadCode;
 var
  totalentrycount : integer;
  lOutput : TStringList;
  lUnique : TStringList;
 begin
  eeo := LoadProfileFromFile(ExtractFilePath(Application.Exename) + 'codetemplates\' + cbPlatforms.Text + '\' + cbCode.Text + '.template');

  if eeo.Source <> -1 then begin

    eeo.StartFrame := 1;
    eeo.EndFrame   := MatrixMain.FrameCount;

    UpdateSettingsDisplay;

    lOutput := TStringList.Create;
    lUnique := TStringList.Create;

    if eeo.RGBEnabled then
      CreateExportAnimationRGB(eeo, lOutput, totalentrycount, lUnique)
    else
      CreateExportAnimation(eeo, lOutput, totalentrycount, lUnique);

    // =========================================================================

    Memo1.Lines.LoadFromFile(ExtractFilePath(Application.Exename) + 'codetemplates\' + cbPlatforms.Text + '\' + cbCode.Text);

    if lOutput.Count <> 0 then begin

      // == first lets process the data token ==================================

      if Pos('{$LMS_MATRIX_DATA$}', Memo1.Text) <> 0 then
        Memo1.Text := StringReplace(Memo1.Text, '{$LMS_MATRIX_DATA$}', lOutput.Text, [rfReplaceAll]);

      // == Now the rest of the tokens =========================================

      if Pos('{$LMS_FRAMES$}', Memo1.Text) <> 0 then
        Memo1.Text := StringReplace(Memo1.Text, '{$LMS_FRAMES$}', IntToStr(MatrixMain.FrameCount), [rfReplaceAll]);

      if Pos('{$LMS_BYTES$}', Memo1.Text) <> 0 then
        Memo1.Text := StringReplace(Memo1.Text, '{$LMS_BYTES$}', '', [rfReplaceAll]);

      if Pos('{$LMS_COUNT$}', Memo1.Text) <> 0 then
        Memo1.Text := StringReplace(Memo1.Text, '{$LMS_COUNT$}', IntToStr(totalentrycount), [rfReplaceAll]);

    end;

    lUnique.Free;
    lOutput.Free;
  end
  else
    ShowMessage('Error loading template!');
end;

procedure TfrmExportCode.UpdateSettingsDisplay;

  function GetDimensionConstraint(aLabel : TLabel; limit, dim, mode : integer): string;
   begin
    aLabel.Font.Color := clBlack;

    case mode of
      0 : begin // minimum
            if limit = 0 then
              Result := 'Unlimited'
            else begin
              if dim < limit then begin
                Result := IntToStr(dim) + ' < ' + IntToStr(limit);

                aLabel.Font.Color := clMaroon;
              end
              else begin
                Result := IntToStr(limit);
              end;
            end;
          end;
      1 : begin // maximum
            if limit = 0 then
              Result := 'Unlimited'
            else begin
              if dim > limit then begin
                Result := IntToStr(dim) + ' > ' + IntToStr(limit);

                aLabel.Font.Color := clMaroon;
              end
              else
                Result := IntToStr(limit);
            end;
          end;
    end;
  end;

 begin
  if cbCode.Enabled then begin
    case eeo.Source of
      0 : begin
            lSource.Caption    := 'Columns';
            lDirection.Caption := GetOrientation(eeo, False);
            lScan.Caption      := GetScanDirection(eeo, False);
            lOutput.Caption    := GetLineContent(eeo, False);
          end;
      1 : begin
            lSource.Caption    := 'Rows';
            lDirection.Caption := GetOrientation(eeo, False);
            lScan.Caption      := GetScanDirection(eeo, False);
            lOutput.Caption    := GetLineContent(eeo, False);
          end;
    end;

    lLSB.Caption    := GetLSB(eeo, False);
    lFormat.Caption := GetLanguage(eeo, False);

    case eeo.NumberFormat of
      0 : lNumbers.Caption := 'Decimal';
      1 : lNumbers.Caption := 'Binary';
      2 : lNumbers.Caption := 'Hex';
    end;

    lGrouping.Caption := GetNumberSize(eeo.Language, eeo.NumberSize, False);

    if eeo.RGBEnabled then begin
      lRGB.Caption := GetRGBMode(eeo, False);
    end
    else
      lRGB.Caption := 'Disabled';
  end
  else begin
    lSource.Caption    := 'n/a';
    lDirection.Caption := 'n/a';
    lScan.Caption      := 'n/a';
    lOutput.Caption    := 'n/a';
    lLSB.Caption       := 'n/a';
    lFormat.Caption    := 'n/a';
    lNumbers.Caption   := 'n/a';
    lGrouping.Caption  := 'n/a';
    lRGB.Caption       := 'n/a';
  end;

  // ===========================================================================

  lMinWidth.Caption  := GetDimensionConstraint(lMinWidth, eeo.MinWidth, MatrixMain.MatrixWidth, 0);
  lMaxWidth.Caption  := GetDimensionConstraint(lMaxWidth, eeo.MaxWidth, MatrixMain.MatrixWidth, 1);

  lMinHeight.Caption := GetDimensionConstraint(lMinHeight, eeo.MinHeight, MatrixMain.MatrixHeight, 0);
  lMaxHeight.Caption := GetDimensionConstraint(lMaxHeight, eeo.MaxHeight, MatrixMain.MatrixHeight, 1);
end;

end.
